#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.0
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApplication
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="C:\\DATABASEFOLDER\\EXAMSDB.MDF")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertCategories(Categories instance);
    partial void UpdateCategories(Categories instance);
    partial void DeleteCategories(Categories instance);
    partial void InsertCities(Cities instance);
    partial void UpdateCities(Cities instance);
    partial void DeleteCities(Cities instance);
    partial void InsertQuestions(Questions instance);
    partial void UpdateQuestions(Questions instance);
    partial void DeleteQuestions(Questions instance);
    partial void InsertTests(Tests instance);
    partial void UpdateTests(Tests instance);
    partial void DeleteTests(Tests instance);
    partial void InsertTestWorks(TestWorks instance);
    partial void UpdateTestWorks(TestWorks instance);
    partial void DeleteTestWorks(TestWorks instance);
    partial void InsertUnvercities(Unvercities instance);
    partial void UpdateUnvercities(Unvercities instance);
    partial void DeleteUnvercities(Unvercities instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::WindowsFormsApplication.Properties.Settings.Default.C__DATABASEFOLDER_EXAMSDB_MDFConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Categories> Categories
		{
			get
			{
				return this.GetTable<Categories>();
			}
		}
		
		public System.Data.Linq.Table<Cities> Cities
		{
			get
			{
				return this.GetTable<Cities>();
			}
		}
		
		public System.Data.Linq.Table<Questions> Questions
		{
			get
			{
				return this.GetTable<Questions>();
			}
		}
		
		public System.Data.Linq.Table<Tests> Tests
		{
			get
			{
				return this.GetTable<Tests>();
			}
		}
		
		public System.Data.Linq.Table<TestWorks> TestWorks
		{
			get
			{
				return this.GetTable<TestWorks>();
			}
		}
		
		public System.Data.Linq.Table<Unvercities> Unvercities
		{
			get
			{
				return this.GetTable<Unvercities>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<UsersAndCategories> UsersAndCategories
		{
			get
			{
				return this.GetTable<UsersAndCategories>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Categories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Questions> _Questions;
		
		private EntitySet<Tests> _Tests;
		
		private EntitySet<Tests> _Tests1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Categories()
		{
			this._Questions = new EntitySet<Questions>(new Action<Questions>(this.attach_Questions), new Action<Questions>(this.detach_Questions));
			this._Tests = new EntitySet<Tests>(new Action<Tests>(this.attach_Tests), new Action<Tests>(this.detach_Tests));
			this._Tests1 = new EntitySet<Tests>(new Action<Tests>(this.attach_Tests1), new Action<Tests>(this.detach_Tests1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Questions", Storage="_Questions", ThisKey="id", OtherKey="categoryID")]
		public EntitySet<Questions> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Tests", Storage="_Tests", ThisKey="id", OtherKey="categoryID")]
		public EntitySet<Tests> Tests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Tests1", Storage="_Tests1", ThisKey="id", OtherKey="categoryID")]
		public EntitySet<Tests> Tests1
		{
			get
			{
				return this._Tests1;
			}
			set
			{
				this._Tests1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(Questions entity)
		{
			this.SendPropertyChanging();
			entity.Categories = this;
		}
		
		private void detach_Questions(Questions entity)
		{
			this.SendPropertyChanging();
			entity.Categories = null;
		}
		
		private void attach_Tests(Tests entity)
		{
			this.SendPropertyChanging();
			entity.Categories = this;
		}
		
		private void detach_Tests(Tests entity)
		{
			this.SendPropertyChanging();
			entity.Categories = null;
		}
		
		private void attach_Tests1(Tests entity)
		{
			this.SendPropertyChanging();
			entity.Categories1 = this;
		}
		
		private void detach_Tests1(Tests entity)
		{
			this.SendPropertyChanging();
			entity.Categories1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cities")]
	public partial class Cities : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Cities()
		{
			this._Users = new EntitySet<Users>(new Action<Users>(this.attach_Users), new Action<Users>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cities_Users", Storage="_Users", ThisKey="id", OtherKey="cityID")]
		public EntitySet<Users> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Cities = this;
		}
		
		private void detach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Cities = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Questions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _categoryID;
		
		private string _text_1;
		
		private string _text_2;
		
		private string _text_3;
		
		private string _text_4;
		
		private string _text_5;
		
		private string _text_6;
		
		private string _text_7;
		
		private string _text_8;
		
		private string _text_9;
		
		private string _text_10;
		
		private EntitySet<Tests> _Tests;
		
		private EntityRef<Categories> _Categories;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncategoryIDChanging(int value);
    partial void OncategoryIDChanged();
    partial void Ontext_1Changing(string value);
    partial void Ontext_1Changed();
    partial void Ontext_2Changing(string value);
    partial void Ontext_2Changed();
    partial void Ontext_3Changing(string value);
    partial void Ontext_3Changed();
    partial void Ontext_4Changing(string value);
    partial void Ontext_4Changed();
    partial void Ontext_5Changing(string value);
    partial void Ontext_5Changed();
    partial void Ontext_6Changing(string value);
    partial void Ontext_6Changed();
    partial void Ontext_7Changing(string value);
    partial void Ontext_7Changed();
    partial void Ontext_8Changing(string value);
    partial void Ontext_8Changed();
    partial void Ontext_9Changing(string value);
    partial void Ontext_9Changed();
    partial void Ontext_10Changing(string value);
    partial void Ontext_10Changed();
    #endregion
		
		public Questions()
		{
			this._Tests = new EntitySet<Tests>(new Action<Tests>(this.attach_Tests), new Action<Tests>(this.detach_Tests));
			this._Categories = default(EntityRef<Categories>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryID", DbType="Int NOT NULL")]
		public int categoryID
		{
			get
			{
				return this._categoryID;
			}
			set
			{
				if ((this._categoryID != value))
				{
					if (this._Categories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryIDChanging(value);
					this.SendPropertyChanging();
					this._categoryID = value;
					this.SendPropertyChanged("categoryID");
					this.OncategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text_1", DbType="NVarChar(MAX)")]
		public string text_1
		{
			get
			{
				return this._text_1;
			}
			set
			{
				if ((this._text_1 != value))
				{
					this.Ontext_1Changing(value);
					this.SendPropertyChanging();
					this._text_1 = value;
					this.SendPropertyChanged("text_1");
					this.Ontext_1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text_2", DbType="NVarChar(MAX)")]
		public string text_2
		{
			get
			{
				return this._text_2;
			}
			set
			{
				if ((this._text_2 != value))
				{
					this.Ontext_2Changing(value);
					this.SendPropertyChanging();
					this._text_2 = value;
					this.SendPropertyChanged("text_2");
					this.Ontext_2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text_3", DbType="NVarChar(MAX)")]
		public string text_3
		{
			get
			{
				return this._text_3;
			}
			set
			{
				if ((this._text_3 != value))
				{
					this.Ontext_3Changing(value);
					this.SendPropertyChanging();
					this._text_3 = value;
					this.SendPropertyChanged("text_3");
					this.Ontext_3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text_4", DbType="NVarChar(MAX)")]
		public string text_4
		{
			get
			{
				return this._text_4;
			}
			set
			{
				if ((this._text_4 != value))
				{
					this.Ontext_4Changing(value);
					this.SendPropertyChanging();
					this._text_4 = value;
					this.SendPropertyChanged("text_4");
					this.Ontext_4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text_5", DbType="NVarChar(MAX)")]
		public string text_5
		{
			get
			{
				return this._text_5;
			}
			set
			{
				if ((this._text_5 != value))
				{
					this.Ontext_5Changing(value);
					this.SendPropertyChanging();
					this._text_5 = value;
					this.SendPropertyChanged("text_5");
					this.Ontext_5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text_6", DbType="NVarChar(MAX)")]
		public string text_6
		{
			get
			{
				return this._text_6;
			}
			set
			{
				if ((this._text_6 != value))
				{
					this.Ontext_6Changing(value);
					this.SendPropertyChanging();
					this._text_6 = value;
					this.SendPropertyChanged("text_6");
					this.Ontext_6Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text_7", DbType="NVarChar(MAX)")]
		public string text_7
		{
			get
			{
				return this._text_7;
			}
			set
			{
				if ((this._text_7 != value))
				{
					this.Ontext_7Changing(value);
					this.SendPropertyChanging();
					this._text_7 = value;
					this.SendPropertyChanged("text_7");
					this.Ontext_7Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text_8", DbType="NVarChar(MAX)")]
		public string text_8
		{
			get
			{
				return this._text_8;
			}
			set
			{
				if ((this._text_8 != value))
				{
					this.Ontext_8Changing(value);
					this.SendPropertyChanging();
					this._text_8 = value;
					this.SendPropertyChanged("text_8");
					this.Ontext_8Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text_9", DbType="NVarChar(MAX)")]
		public string text_9
		{
			get
			{
				return this._text_9;
			}
			set
			{
				if ((this._text_9 != value))
				{
					this.Ontext_9Changing(value);
					this.SendPropertyChanging();
					this._text_9 = value;
					this.SendPropertyChanged("text_9");
					this.Ontext_9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text_10", DbType="NVarChar(MAX)")]
		public string text_10
		{
			get
			{
				return this._text_10;
			}
			set
			{
				if ((this._text_10 != value))
				{
					this.Ontext_10Changing(value);
					this.SendPropertyChanging();
					this._text_10 = value;
					this.SendPropertyChanged("text_10");
					this.Ontext_10Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questions_Tests", Storage="_Tests", ThisKey="id", OtherKey="questionsID")]
		public EntitySet<Tests> Tests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Questions", Storage="_Categories", ThisKey="categoryID", OtherKey="id", IsForeignKey=true)]
		public Categories Categories
		{
			get
			{
				return this._Categories.Entity;
			}
			set
			{
				Categories previousValue = this._Categories.Entity;
				if (((previousValue != value) 
							|| (this._Categories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categories.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Categories.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._categoryID = value.id;
					}
					else
					{
						this._categoryID = default(int);
					}
					this.SendPropertyChanged("Categories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tests(Tests entity)
		{
			this.SendPropertyChanging();
			entity.Questions = this;
		}
		
		private void detach_Tests(Tests entity)
		{
			this.SendPropertyChanging();
			entity.Questions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tests")]
	public partial class Tests : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _categoryID;
		
		private int _questionsID;
		
		private int _maxTime;
		
		private int _passMark;
		
		private EntitySet<TestWorks> _TestWorks;
		
		private EntityRef<Categories> _Categories;
		
		private EntityRef<Categories> _Categories1;
		
		private EntityRef<Questions> _Questions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncategoryIDChanging(int value);
    partial void OncategoryIDChanged();
    partial void OnquestionsIDChanging(int value);
    partial void OnquestionsIDChanged();
    partial void OnmaxTimeChanging(int value);
    partial void OnmaxTimeChanged();
    partial void OnpassMarkChanging(int value);
    partial void OnpassMarkChanged();
    #endregion
		
		public Tests()
		{
			this._TestWorks = new EntitySet<TestWorks>(new Action<TestWorks>(this.attach_TestWorks), new Action<TestWorks>(this.detach_TestWorks));
			this._Categories = default(EntityRef<Categories>);
			this._Categories1 = default(EntityRef<Categories>);
			this._Questions = default(EntityRef<Questions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryID", DbType="Int NOT NULL")]
		public int categoryID
		{
			get
			{
				return this._categoryID;
			}
			set
			{
				if ((this._categoryID != value))
				{
					if ((this._Categories.HasLoadedOrAssignedValue || this._Categories1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryIDChanging(value);
					this.SendPropertyChanging();
					this._categoryID = value;
					this.SendPropertyChanged("categoryID");
					this.OncategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questionsID", DbType="Int NOT NULL")]
		public int questionsID
		{
			get
			{
				return this._questionsID;
			}
			set
			{
				if ((this._questionsID != value))
				{
					if (this._Questions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquestionsIDChanging(value);
					this.SendPropertyChanging();
					this._questionsID = value;
					this.SendPropertyChanged("questionsID");
					this.OnquestionsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxTime", DbType="Int NOT NULL")]
		public int maxTime
		{
			get
			{
				return this._maxTime;
			}
			set
			{
				if ((this._maxTime != value))
				{
					this.OnmaxTimeChanging(value);
					this.SendPropertyChanging();
					this._maxTime = value;
					this.SendPropertyChanged("maxTime");
					this.OnmaxTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passMark", DbType="Int NOT NULL")]
		public int passMark
		{
			get
			{
				return this._passMark;
			}
			set
			{
				if ((this._passMark != value))
				{
					this.OnpassMarkChanging(value);
					this.SendPropertyChanging();
					this._passMark = value;
					this.SendPropertyChanged("passMark");
					this.OnpassMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tests_TestWorks", Storage="_TestWorks", ThisKey="id", OtherKey="testID")]
		public EntitySet<TestWorks> TestWorks
		{
			get
			{
				return this._TestWorks;
			}
			set
			{
				this._TestWorks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Tests", Storage="_Categories", ThisKey="categoryID", OtherKey="id", IsForeignKey=true)]
		public Categories Categories
		{
			get
			{
				return this._Categories.Entity;
			}
			set
			{
				Categories previousValue = this._Categories.Entity;
				if (((previousValue != value) 
							|| (this._Categories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categories.Entity = null;
						previousValue.Tests.Remove(this);
					}
					this._Categories.Entity = value;
					if ((value != null))
					{
						value.Tests.Add(this);
						this._categoryID = value.id;
					}
					else
					{
						this._categoryID = default(int);
					}
					this.SendPropertyChanged("Categories");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Tests1", Storage="_Categories1", ThisKey="categoryID", OtherKey="id", IsForeignKey=true)]
		public Categories Categories1
		{
			get
			{
				return this._Categories1.Entity;
			}
			set
			{
				Categories previousValue = this._Categories1.Entity;
				if (((previousValue != value) 
							|| (this._Categories1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categories1.Entity = null;
						previousValue.Tests1.Remove(this);
					}
					this._Categories1.Entity = value;
					if ((value != null))
					{
						value.Tests1.Add(this);
						this._categoryID = value.id;
					}
					else
					{
						this._categoryID = default(int);
					}
					this.SendPropertyChanged("Categories1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questions_Tests", Storage="_Questions", ThisKey="questionsID", OtherKey="id", IsForeignKey=true)]
		public Questions Questions
		{
			get
			{
				return this._Questions.Entity;
			}
			set
			{
				Questions previousValue = this._Questions.Entity;
				if (((previousValue != value) 
							|| (this._Questions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Questions.Entity = null;
						previousValue.Tests.Remove(this);
					}
					this._Questions.Entity = value;
					if ((value != null))
					{
						value.Tests.Add(this);
						this._questionsID = value.id;
					}
					else
					{
						this._questionsID = default(int);
					}
					this.SendPropertyChanged("Questions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestWorks(TestWorks entity)
		{
			this.SendPropertyChanging();
			entity.Tests = this;
		}
		
		private void detach_TestWorks(TestWorks entity)
		{
			this.SendPropertyChanging();
			entity.Tests = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestWorks")]
	public partial class TestWorks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _userID;
		
		private int _testID;
		
		private int _result;
		
		private int _leadTime;
		
		private EntityRef<Tests> _Tests;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OntestIDChanging(int value);
    partial void OntestIDChanged();
    partial void OnresultChanging(int value);
    partial void OnresultChanged();
    partial void OnleadTimeChanging(int value);
    partial void OnleadTimeChanged();
    #endregion
		
		public TestWorks()
		{
			this._Tests = default(EntityRef<Tests>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_testID", DbType="Int NOT NULL")]
		public int testID
		{
			get
			{
				return this._testID;
			}
			set
			{
				if ((this._testID != value))
				{
					if (this._Tests.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntestIDChanging(value);
					this.SendPropertyChanging();
					this._testID = value;
					this.SendPropertyChanged("testID");
					this.OntestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_result", DbType="Int NOT NULL")]
		public int result
		{
			get
			{
				return this._result;
			}
			set
			{
				if ((this._result != value))
				{
					this.OnresultChanging(value);
					this.SendPropertyChanging();
					this._result = value;
					this.SendPropertyChanged("result");
					this.OnresultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leadTime", DbType="Int NOT NULL")]
		public int leadTime
		{
			get
			{
				return this._leadTime;
			}
			set
			{
				if ((this._leadTime != value))
				{
					this.OnleadTimeChanging(value);
					this.SendPropertyChanging();
					this._leadTime = value;
					this.SendPropertyChanged("leadTime");
					this.OnleadTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tests_TestWorks", Storage="_Tests", ThisKey="testID", OtherKey="id", IsForeignKey=true)]
		public Tests Tests
		{
			get
			{
				return this._Tests.Entity;
			}
			set
			{
				Tests previousValue = this._Tests.Entity;
				if (((previousValue != value) 
							|| (this._Tests.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tests.Entity = null;
						previousValue.TestWorks.Remove(this);
					}
					this._Tests.Entity = value;
					if ((value != null))
					{
						value.TestWorks.Add(this);
						this._testID = value.id;
					}
					else
					{
						this._testID = default(int);
					}
					this.SendPropertyChanged("Tests");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_TestWorks", Storage="_Users", ThisKey="userID", OtherKey="id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.TestWorks.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.TestWorks.Add(this);
						this._userID = value.id;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Unvercities")]
	public partial class Unvercities : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Unvercities()
		{
			this._Users = new EntitySet<Users>(new Action<Users>(this.attach_Users), new Action<Users>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unvercities_Users", Storage="_Users", ThisKey="id", OtherKey="univerID")]
		public EntitySet<Users> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Unvercities = this;
		}
		
		private void detach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Unvercities = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _email;
		
		private int _age;
		
		private int _cityID;
		
		private int _univerID;
		
		private EntitySet<TestWorks> _TestWorks;
		
		private EntityRef<Cities> _Cities;
		
		private EntityRef<Unvercities> _Unvercities;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnageChanging(int value);
    partial void OnageChanged();
    partial void OncityIDChanging(int value);
    partial void OncityIDChanged();
    partial void OnuniverIDChanging(int value);
    partial void OnuniverIDChanged();
    #endregion
		
		public Users()
		{
			this._TestWorks = new EntitySet<TestWorks>(new Action<TestWorks>(this.attach_TestWorks), new Action<TestWorks>(this.detach_TestWorks));
			this._Cities = default(EntityRef<Cities>);
			this._Unvercities = default(EntityRef<Unvercities>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_age", DbType="Int NOT NULL")]
		public int age
		{
			get
			{
				return this._age;
			}
			set
			{
				if ((this._age != value))
				{
					this.OnageChanging(value);
					this.SendPropertyChanging();
					this._age = value;
					this.SendPropertyChanged("age");
					this.OnageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cityID", DbType="Int NOT NULL")]
		public int cityID
		{
			get
			{
				return this._cityID;
			}
			set
			{
				if ((this._cityID != value))
				{
					if (this._Cities.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncityIDChanging(value);
					this.SendPropertyChanging();
					this._cityID = value;
					this.SendPropertyChanged("cityID");
					this.OncityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_univerID", DbType="Int NOT NULL")]
		public int univerID
		{
			get
			{
				return this._univerID;
			}
			set
			{
				if ((this._univerID != value))
				{
					if (this._Unvercities.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuniverIDChanging(value);
					this.SendPropertyChanging();
					this._univerID = value;
					this.SendPropertyChanged("univerID");
					this.OnuniverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_TestWorks", Storage="_TestWorks", ThisKey="id", OtherKey="userID")]
		public EntitySet<TestWorks> TestWorks
		{
			get
			{
				return this._TestWorks;
			}
			set
			{
				this._TestWorks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cities_Users", Storage="_Cities", ThisKey="cityID", OtherKey="id", IsForeignKey=true)]
		public Cities Cities
		{
			get
			{
				return this._Cities.Entity;
			}
			set
			{
				Cities previousValue = this._Cities.Entity;
				if (((previousValue != value) 
							|| (this._Cities.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cities.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Cities.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._cityID = value.id;
					}
					else
					{
						this._cityID = default(int);
					}
					this.SendPropertyChanged("Cities");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unvercities_Users", Storage="_Unvercities", ThisKey="univerID", OtherKey="id", IsForeignKey=true)]
		public Unvercities Unvercities
		{
			get
			{
				return this._Unvercities.Entity;
			}
			set
			{
				Unvercities previousValue = this._Unvercities.Entity;
				if (((previousValue != value) 
							|| (this._Unvercities.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unvercities.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Unvercities.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._univerID = value.id;
					}
					else
					{
						this._univerID = default(int);
					}
					this.SendPropertyChanged("Unvercities");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestWorks(TestWorks entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_TestWorks(TestWorks entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersAndCategories")]
	public partial class UsersAndCategories
	{
		
		private int _userID;
		
		private int _categoryID;
		
		public UsersAndCategories()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this._userID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryID", DbType="Int NOT NULL")]
		public int categoryID
		{
			get
			{
				return this._categoryID;
			}
			set
			{
				if ((this._categoryID != value))
				{
					this._categoryID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
